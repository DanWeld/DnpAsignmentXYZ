<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Server/CLI/UI/MainView/ManageCommentsView.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Server/CLI/UI/MainView/ManageCommentsView.cs" />
              <option name="originalContent" value="namespace CLI.UI.ManageMainView;&#10;&#10;using RepositoryContracts;&#10;using Entities;&#10;using CLI.UI.ManagePosts;&#10;using CLI.UI.ManageUsers;&#10;&#10;public class MainView&#10;{&#10;    // ...existing code...&#10;    public MainView(IUserRepository users, IPostRepository posts, ICommentRepository comments, User currentUser)&#10;    { _users = users; _posts = posts; _comments = comments; _currentUser = currentUser; }&#10;&#10;    public async Task ShowAsync()&#10;    {&#10;        while (true)&#10;        {&#10;            // ...existing code...&#10;            switch (choice)&#10;            {&#10;                case &quot;1&quot;:&#10;                    await new CreatePostView(_posts, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;2&quot;:&#10;                    await new AddCommentView(_comments, _posts, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;3&quot;:&#10;                    new ListPostsView(_posts).Show();&#10;                    break;&#10;                case &quot;4&quot;:&#10;                    await new SinglePostView(_posts, _comments, _users).ShowAsync();&#10;                    break;&#10;                case &quot;5&quot;:&#10;                    await new ManageUsersView(_users).ShowAsync();&#10;                    break;&#10;                case &quot;6&quot;:&#10;                    await new ManagePostsView(_posts, _comments, _users, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;0&quot;:&#10;                    return;&#10;                default:&#10;                    Console.WriteLine(&quot;Invalid option.&quot;);&#10;                    break;&#10;n" />
              <option name="updatedContent" value="namespace CLI.UI.ManageMainView;&#10;&#10;using RepositoryContracts;&#10;using Entities;&#10;using CLI.UI.ManagePosts;&#10;using CLI.UI.ManageUsers;&#10;&#10;public class MainView&#10;{&#10;    private readonly IUserRepository _users;&#10;    private readonly IPostRepository _posts;&#10;    private readonly ICommentRepository _comments;&#10;    private readonly User _currentUser;&#10;&#10;    public MainView(IUserRepository users, IPostRepository posts, ICommentRepository comments, User currentUser)&#10;    { _users = users; _posts = posts; _comments = comments; _currentUser = currentUser; }&#10;&#10;    public async Task ShowAsync()&#10;    {&#10;        while (true)&#10;        {&#10;            Console.WriteLine();&#10;            Console.WriteLine($&quot;Logged in as: {_currentUser.Username} (Id {_currentUser.Id})&quot;);&#10;            Console.WriteLine(&quot;1. Create Post&quot;);&#10;            Console.WriteLine(&quot;2. Add Comment&quot;);&#10;            Console.WriteLine(&quot;3. Posts Overview&quot;);&#10;            Console.WriteLine(&quot;4. View Single Post&quot;);&#10;            Console.WriteLine(&quot;5. Manage Users&quot;);&#10;            Console.WriteLine(&quot;6. Manage Posts&quot;);&#10;            Console.WriteLine(&quot;0. Logout&quot;);&#10;            Console.Write(&quot;Select: &quot;);&#10;            var choice = Console.ReadLine();&#10;            switch (choice)&#10;            {&#10;                case &quot;1&quot;:&#10;                    await new CreatePostView(_posts, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;2&quot;:&#10;                    await new AddCommentView(_comments, _posts, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;3&quot;:&#10;                    new ListPostsView(_posts).Show();&#10;                    break;&#10;                case &quot;4&quot;:&#10;                    await new SinglePostView(_posts, _comments, _users).ShowAsync();&#10;                    break;&#10;                case &quot;5&quot;:&#10;                    await new ManageUsersView(_users).ShowAsync();&#10;                    break;&#10;                case &quot;6&quot;:&#10;                    await new ManagePostsView(_posts, _comments, _users, _currentUser).ShowAsync();&#10;                    break;&#10;                case &quot;0&quot;:&#10;                    return;&#10;                default:&#10;                    Console.WriteLine(&quot;Invalid option.&quot;);&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>